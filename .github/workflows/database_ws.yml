name: Create Giswater Schema (WS)

on:
  push:
    branches: [ dev-3.6 ]
  pull_request:
    branches: [ dev-3.6 ]

jobs:
  setup-and-test-db:
    runs-on: ubuntu-latest

    # services:
    #   postgres:
    #     image: postgres:latest
    #     ports:
    #       - 5432:5432
    #     env:
    #       POSTGRES_DB: giswater_test_db
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: postgres
    #     options: >-
    #       --health-cmd "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r test/requirements.txt

    # - name: Wait for PostgreSQL to be ready
    #   run: |
    #     echo "Waiting for PostgreSQL to be ready..."
    #     while ! pg_isready -h localhost -p 5432 -U postgres; do
    #       sleep 1
    #     done

    - name: Setup PostgreSQL and PostGIS for Linux/macOS/Windows
      uses: nyurik/action-setup-postgis@v2.1
      with:
        database: giswater_test_db
    
    - name: Install pgrouting & postgis_raster
      env:
        PGPASSWORD: postgres
      run: |
        sudo apt-get install postgresql-14-pgrouting
        psql -h localhost -U postgres -d giswater_test_db -c 'CREATE EXTENSION pgrouting;'
        psql -h localhost -U postgres -d giswater_test_db -c 'CREATE EXTENSION postgis_raster;'

    - name: Replace variables in SQL files
      run: python test/replace_vars.py

    - name: Create sample schema
      env:
        PGPASSWORD: postgres
      run: python test/execute_sql_files.py ws

    - name: Verify Database
      env:
        PGPASSWORD: postgres
      run: |
        # Check PostGIS version
        postgis_version=$(psql -h localhost -U postgres -d giswater_test_db -t -c "SELECT postgis_full_version();")
        if [ -z "$postgis_version" ]; then
          echo "PostGIS extension not found or not installed correctly."
          exit 1
        else
          echo "PostGIS version:"
          echo "$postgis_version"
        fi

        # Check pgRouting version
        pgrouting_version=$(psql -h localhost -U postgres -d giswater_test_db -t -c "SELECT * FROM pgr_version();")
        if [ -z "$pgrouting_version" ]; then
          echo "pgRouting extension not found or not installed correctly."
          exit 1
        else
          echo "pgRouting version:"
          echo "$pgrouting_version"
        fi

        # Check features
        arcs=$(psql -h localhost -U postgres -d giswater_test_db -t -c "SELECT count(*) FROM ws_36.v_edit_arc;")
        if [ -z "$arcs" ]; then
          echo "No arcs found in the v_edit_arc table."
          exit 1
        else
          echo "Arcs found:"
          echo "$tables"
        fi
